A web application is a client-server application 
where the client (frontend) runs in a web browser, and the backend runs on a web server.

-->The frontend is commonly referred to as the client and the backend as the server-side of a web application

------------
Approaches
For example, one decision developers and software architects must make is client-side rendering vs. server-side rendering.

With client-side rendering, the JavaScript code running in the user's web browser is responsible for requesting data from the server and manipulating the webpage as needed. For example, if a user enters an unacceptable value on a form, the client-side code would update the page with an error message without contacting the server and reloading the page.

With server-side rendering, the client requests a new webpage from the server for every update, and displays the page in the way it's received. For example, if a user enters an unacceptable value on a form, the client-side code would request a new page with an error message.

It is possible to use a combination of these approaches, using server-side code to render the initial page, and then updating it as needed with client-side code.

------------
Definitions:
The web server is the physical machine that hosts your application and makes it available to users across the globe over the Internet. 
 
The database is where the data for an application is stored. The database stores, organizes and provides access to an application's data. There are several types of databases and database management systems that can be used here. 

-----------
In summary, a web server provides access to resources on the web, by handling web requests from clients. It can contain an application server that handles the dynamic business logic of an application, and contain or connect to a database which correlates to the data layer of your app. These are the 2 components that you will program as the back-end developer. There are many languages and technologies you can choose to use for each layer (presentation, application, data) and for the web server. The combination of technologies used for an application make up the software/solution "stack".

A back-end or full-stack developer writes the code for the application server, which handles the business logic of an application. The database server handles the storage of structured data for the application. These components exist as part of the server-side of a web app, and run on a web server. The web server software handles basic HTTP requests and responses between the server and clients over the Internet.
---------------------
HTTP:


As we discussed in the last lesson, web applications consist of a client-side and a server-side component, and communicate when clients send requests to servers.

In order for clients to be able to communicate with web servers, there needs to be a common language, or protocol, that provides rules for how the communication should happen. The protocol used for Web communication is called HTTP, which stands for HyperText Transfer Protocol.

Your browser is using HTTP to communicate with a web server whenever you enter a URL or click a hyperlink, when a user submits data in a form, or when a page is updated with dynamic data.

--------
Now, let's look at how HTTP makes this communication and functionality possible.

All interactions that use HTTP are based on requests and responses.

    Clients(browsers) send HTTP requests to servers to request resources, data or actions on data. The requests are what correspond to the CRUD operations as detailed above.

    Servers send HTTP responses to clients after handling the requests appropriately. These responses include a status and can include data or resources that were requested.

    HTTP defines request methods and response methods that clients and servers use to communicate.

HTTP revolves around the idea of resources and actions on those resources that we introduced above. The actions that can be performed with HTTP correlate to each CRUD operation:

    creating data: HTTP PUT; HTTP POST
    reading data: HTTP GET
    updating data: HTTP PUT; HTTP POST
    deleting data: HTTP DELETE

Clients use these HTTP methods in order to facilitate CRUD operations within an application.

A central aspect of HTTP is that it is stateless. This means that the server and client never need to remember anything about the resources or any previous requests/responses. Every request and response is independent from the previous one.

HTTP Request Methods

HTTP defines a set of methods that clients can use to request information from web servers. Remember that these methods correspond to the CRUD operations that can be performed on data:

    Creating data:

    Clients use the HTTP POST method to insert or update data on the server. This is the method used when HTML forms need to send form data to the server. For example, when a user fills out a form to create a new account and presses the submit button, the browser would send an HTTP POST request to the application server to have the user's data stored in a database.

    Clients use the HTTP PUT method to create or update data on the server. This method is similar to the POST method.

    Reading data:

    Clients can use the HTTP GET method to retrieve information from a server. This is useful in scenarios where the client needs to retrieve something that the user is requesting.

    For example, when a user browses a shopping site and navigates to the "pants" page, the browser may send a GET request to the app's server requesting a list of all pants for sale and then display those results on the page.

    The client may optionally pass parameters that give the server more information about the request, such as the id or name of the specific object the client wants to locate.

    Updating data: The HTTP PUT or POST methods

    Deleting data:

    Clients use the HTTP DELETE method to delete resources from the server.

Format of an HTTP Request

The HTTP request messages that clients send consist of a request line, an optional header and an optional message body.
The Request Line

When a client sends an HTTP request to a server, it needs to include some key information about the request: HTTP Request

    Request method: What type of request is being made? (GET, PUT, POST or DELETE)
    a URI to identify the resource involved in the request: What resources does this request affect?
    HTTP Version #: What version of the HTTP protocol is this message written in?

This information is included in the request line of an HTTP Request message.

For example, in a Q&A forum, the HTTP request lines would be used as follows to access and modify questions:

Let's assume the server URL in this scenario is www.askquestions.com and that the path for the question resource is /questions.

    Create- add a new question:

    POST /questions HTTP/1.1

    Read- view a question (a question with an ID=3, in this case):

    GET /questions:3 HTTP/1.1

    Read- view all questions:

    GET /questions HTTP/1.1

    Update- Modify a question:

    PUT /questions:2 HTTP/1.1

    Delete- Delete a question:

    DELETE /questions:4 HTTP/1.1

The web server would interpret each of these requests based on the request type and the URI, and respond or complete an operation as appropriate.

The header and body

The header contains optional metadata about the request. The details of header fields are out of scope for this course.

The body contains the optional parameters for the request, and/or any data being sent to the server. If a client sends a POST request after a user fills out a form, the form data would be sent within the body of the message.
