This module will introduce you to the basics of using Node.js and Express to create web app backends. We'll walk through the components of Node.js and Express apps and practice with examples.

In this module you will:

    Become familiar with using Node.js to set up and run basic web servers
    Become familiar with using Express with Node.js to create basic Node.js REST APIs
    Create an API to handle HTTP requests by defining routes in an Express app
-----------------------------------------------------------------------------------
What is Node.js?
JavaScript was created to be used in the development of interactive webpages.  JavaScript traditionally runs in web browsers, meaning it's used for front-end/client-side web development.

Recently JavaScript has also become popular for server-side development. With developments like Node.js, JavaScript can be used to run web servers. With Node.js, we can write JavaScript code on the server-side that performs the data access and manipulation for an application before returning that data to the client.

Intro to Node.js
--->Node.js is a server-side runtime environment
---->  can be used to program web application servers.
. The event-driven asynchronous nature of Node.js makes web apps developed using Node.js very fast and efficient.
Node.js can be used to:

        generate page content dynamically
        handle HTML form data
        work with databases
        work with files on the server
        
        
-------------------------------------------------------------------------------------------
Let's take a look at how a basic web server can be set up using Node.js:

        Import the proper modules that you'll need for your project

        Set up a server to listen for HTTP requests.

        Configure server to interpret and respond to HTTP requests

            a. Work with database to obtain data for response
            b. Perform logic and algorithms, if needed, to prepare response
In computer networking, a port is a destination, or an endpoint for communication. You can think of a port as an address that you can send mail to. When we use Node.js to set up an application server on a computer (a server), we'll have to specify which port requests for this app can be sent to. This is the port # we will program the Node.js app to listen for requests on. 
------
Node Package Manager (npm): This comes packaged with your Node.js installation. It allows you to quickly install other add-ons to use 
with your Node.js projects.
Dependencies: is a package that your project depends on for any given reason. NPM allows us to install and manage these dependencies


Modules: Modules are collections of functions that you can utilize in your Node.js application. This allows you to easily incorporate existing code that is written for a specific scenario, which helps you focus on your app's behavior.

You will add a module to your project using the require() function, passing in the name of the module.

For example, require('express'); includes the express module in your project.

NOTE: Note: We'll use single quotes (' ') instead of double quotes (" ") in Node.js files, except for when writing in json

The HTTP Module: The http module is a module that is built into Node.js. It allows HTTP communication with your Node.js server.
The package.json file


The Package.json file:
Every Node.js project contains a package.json file. This file contains metadata about your project, such as the project title, version #, author(s), etc. More importantly, it lists the dependencies that your project has- listing each dependency and the version of each dependency that your project needs.

Node.js will use the information in this file to install the correct dependencies when you set up your project.

You'll run the npm init command to setup your project, which uses the information from your package.json file to do so.

__________________________________________________________________________________________


Using Express with Node.js

Express is a framework that makes it easy to build web apps and APIs with Node.js.

The primary way that we'll use Express in this course is to route HTTP requests that are made to your server.

With Express, you can easily define routes that control how your server handles different types of requests, which translates to the endpoints that make up your REST API.  You could accomplish this same functionality using pure Node.js, but using a framework allows developers to reuse common functionality, in this case API functionality, while focusing on writing code for the unique requirements of their own projects.

As you'll see, using Express allows us to easily define the endpoints for our APIs in a Node.js project.

---------------------------------------------------------------------------------------------------
Working with Express
Now that you have a basic understanding of what we can use Express for, lets take a look at the basics of using Express to build a REST API.

This lesson will give you an overview of some concepts and tools that you'll be working with in the next exercise.
Steps to create a REST API using Express with Node.js

    Import the proper modules that will help you develop your app. You'll need to import the Express module in order to use Express in your Node.js project.

    Set up a server to listen for HTTP requests. Express makes this step simpler than using Node.js alone.

    Configure server to receive and respond to HTTP requests

    a. Set up routes that specify how to handle different HTTP requests.

    b. Work with database to obtain data for response

    c. Perform logic and algorithms, if needed, to prepare response

Routing

Routing is a fundamental aspect of developing a REST API with Express. Routing refers to the process of defining how the app will respond to client requests to particular API endpoints.

As we covered in Module 1, an endpoint refers to a unique combination of http request type and request URI/path.

For example, a client may send a GET request to the /questions path of an API in order to retrieve a list of questions. We would refer to this endpoint as GET '/questions'.

A different endpoint on the same server might be POST '/questions'.

Express allows us to set up a route to handle each API endpoint. For each route, we'll provide a callback function that Express will run once a client sends a request to that endpoint.
What About Our Client-Side Files?

You may be wondering how your client-side HTML, CSS and JavaScript files integrate with your server-side app.

There are several web app development models, such as the commonly used MVC pattern. In some patterns, you can use server-side rendering, where the backend of your app directly modifies your client-side files on the server. In such scenarios, the server-side code directly inserts data into HTML templates before returning those files to the client.

In this case, since we are developing a REST API as our backend, our server will simply be responding to the client with data when requested. Therefore, our client-side files will be sending requests for that data, and then filling the data into the HTML file appropriately within the browser.

This process of simply returning files without modifying them is called serving static files. We'll keep our static HTML, CSS and JavaScript files for our front-end in a public folder on our server, and Express will simply return those files as-is when the browser requests them.

The following line of code in your project file will accomplish this:

    app.use(express.static('public'));

So, our app will start running on a server, and when a user navigates to the website, our Express app will simply send over the HTML, CSS and client-side JavaScript files to run as is. At some point, the client-side JavaScript code may send a request to the server for a list of data, or to update data based on user input. That's when our Express/Node.js code will work to handle the request.

------------------------------------------------

Testing with a REST Client

In the previous section, we tested our API endpoints by simply entering the URL for a request into our web browser, with the application running on localhost.

This is fine for GET requests, because we can include the request and associated data (parameters and query strings) within the request URL in the browser window.

However, for POST and PUT requests, where we need to include information in the body of the request, we don't have a way to do that using a web browser.

In these situations, it can be useful to use a REST client that allows you to manually send HTTP requests to a specified web server and endpoint.

We'll work with Postman, which is available for free across platforms, but there are others as well.

Getting Started with Postman

Postman provides a lot of features that can be useful for developers, but for now we'll focus on the ability to structure and send HTTP requests to a server.

You can find detailed documentation on the Postman site here, but let's review at a high-level how to use Postman to send HTTP requests to an API.

        Download and install Postman to your computer. Open the application.
        Navigate to the New request option.
        On the new request window, enter values for request name, description (optional), and which collection you want to save the request to for future use.
        On the request form, the primary fields you'll need to provide values for are:

            method type: Select which type of HTTP request you are sending (GET, PUT, POST, DELETE, etc.)
            request URL:: The full URL for your request. This includes the server base URL + the API endpoint you are sending a request to. For the quotes API, the GET /quotes URL would be localhost:3000/quotes, when the API is running on your personal machine.
            params: You can optionally enter key-value pairs for parameters that should be passed with your request. In this case, the parameters will be added to your request URL as query strings.
            Body: You can optionally provide data to be included in the body of your request. You will typically use this when sending a POST request, to pass the data that would be coming from an HTML form.

Once you have filled in the appropriate fields for your request, you can select the Send button to send the request to the specified server. If the server is running, you should receive the appropriate response, which will be displayed in the Response section of the Postman window.
Testing the GET /quotes route.

Let's walk through how to test the GET /quotes/:id route from the previous section, using Postman.

On the new request window, complete the following steps:

        Select GET from the dropdown of HTTP request method types
        Enter the request URL: localhost:3000/quotes/2
        Select the Send button.  (Make sure your Node.js API is still running)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

POST Routes:
Now that we've set up 2 GET Routes in our API, let's add a POST route that will allow users to send data to be stored.

We'll add the following endpoint to our API:
Path	Method	Body	Result
/quotes 	POST 	quote object 	Add a new quote

The associated route header in our Express app will thus be:


app.post('/quotes', function(req, res){
    console.log("Insert a new quote");
});

Parsing request body data - req.body

Our POST endpoint will be used when a user submits data to store a new quote. That means, our route will need to access and process the data submitted by the user. Unlike GET requests, where all of the data for parameters and query strings can be passed in the request URL, data associated with a POST request is sent as part of the request method's body.

In this case, this data will include the quote string, the author string, and a year value.

We can access this data in key-value pairs using req.body, but only after the data has been parsed into this format. We can install body-parsing middleware that retrieves data from the request body message, and parses it into these key-value pairs for us.

We'll use a middleware called body-parser. In order to use body-parser, complete the following steps:

        Install body-parser and save it as a dependency for your Node.js project, by running the following command in your command-line interface within your project folder: npm install --save body-parser
        In your server.js file, require body-parser with the following line of code: var bodyParser = require('body-parser');
        Use app.use() to tell your Express app to use body-parser as middleware for url-encoded form data (this is the data format we expect to receive from HTML forms)

app.use(bodyParser.urlencoded({ extended: true }));

That's it! Once we complete these steps, we can use req.body to access the key-value pairs of data that were passed in the request body for a POST request.

Our POST /quotes route will be defined as:


app.post('/quotes', function(req, res){
  console.log("Insert a new quote: " + req.body.quote);
  res.json(req.body);
});

We are using req.body.quote to get the quote string, and sending the full JSON object representing all of the quote's data (quote, author, year), using req.body.
Test the route

Let's test this route using Postman to ensure we get the desired result.

We can do this by adding sample form data for a new quote to the body of our POST request.

On the new request window, complete the following steps:

    Select POST from the dropdown of HTTP request method types.

    Enter the request URL: localhost:3000/quotes

    Select Body under the URL input box

    Select x-www-form-urlencoded in the Body window to send url encoded form data

    Enter key-value pairs for a new quote in the body window:

    quote: We become what we think about.

    author: Earl Nightingale

    year: 1965

    Note that the quote information being used here is just a sample for testing.

    Make sure your Node.js app is running. (Use node server.js command)

    Select the Send button to send the POST request to your Node.js API.

Postman- POST Request

In the Postman Response Body window, you should see a JSON object containing the same data you just sent in the request. This was returned using req.body.

Postman- POST Request Console

In the console, you should see a message that outputs the quote string.

You could also test your route or utilize it by creating an HTML client that sends data from a form. Our Node.js REST API can now handle POST requests.
_-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Summary:


In this exercise, we defined a Quotes API that allows users to retrieve and store quote information. This API currently defines the following endpoints:
Path	Method	Body	Result
/quotes 	GET 	n/a 	View a list of all quotes
/quotes/:id 	GET 	n/a 	View a quote with the id :id
/quotes 	POST 	quote object 	Add a new quote
Solution

Here is the final solution based on the instructions given throughout the exercise:

// imports
var express = require('express');
var app = express();
var bodyParser = require('body-parser');

//mounts BodyParser as middleware - every request passes through it
app.use(bodyParser.urlencoded({ extended: true })); 


var quotes = [
    {
        id: 1,
        quote: "The best is yet to come",
        author: "Unknown",
        year: 2000
    },
    {
        id: 2,
        quote: "This is a quote",
        author: "First Last",
        year: 1930
    },
    {
        id: 3,
        quote: "This is another quote",
        author: "First2 Last2",
        year: 1910
    }
];

// ROUTES

app.get('/', function(req, res) {
    res.send("Get request received at '/' ");
});

app.get('/quotes', function(req, res){
    if(req.query.year){
        res.send("Return a list of quotes from the year: " + req.query.year);
    }
    else{
        res.json(quotes);
    }
});

 app.get('/quotes/:id', function(req, res){
    console.log("return quote with the ID: " + req.params.id);
    res.send("Return quote with the ID: " + req.params.id);
});

app.post('/quotes', function(req, res){
    console.log("Insert a new quote: " + req.body.quote);
    res.json(req.body);
});

app.listen(3000, function(){
    console.log('Listening on Port 3000');
});

If you want more practice, there are several ways to modify and improve this API. You could add more routes, such as a DELETE /quotes route, or a PUT /quotes route to modify existing quotes. In the next module, we'll continue working on this API as we connect to a SQL database.

